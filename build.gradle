import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.2.0'
        classpath 'org.gradle.api.plugins:gradle-gaelyk-plugin:0.6'
        classpath 'org.gradle.api.plugins:gradle-appengine-geb-plugin:0.4'
    }
}

apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'gaelyk'
apply plugin: 'appengine-geb'

ext {
    //mrhaki.blogspot.de/2015/04/gradle-goodness-use-git-commit-id-in.html
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
}

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

def buildInfo = [:]

buildInfo['applicationId'] = applicationId
buildInfo['applicationName'] = applicationName
buildInfo['applicationVersion'] = applicationVersion
buildInfo['gitMilestone'] = gitMilestone
buildInfo['gitCommitId'] = git.head().abbreviatedId
buildInfo['tag'] = "${gitMilestone}-${applicationVersion}-${buildInfo.gitCommitId}".toString()
InetAddress inetAddr = InetAddress.getLocalHost();
buildInfo['host'] = inetAddr.hostName
buildInfo['by'] = System.properties['user.name']
buildInfo['type'] = buildType
buildInfo['time'] = (new Date()).toString()

println "---------------------------------------------------------------------------"
println "Application Id         : ${buildInfo.applicationId}"
println "Application Name       : ${buildInfo.applicationName}"
println "Application Version    : ${buildInfo.applicationVersion}"
println "Git Milestone          : ${buildInfo.gitMilestone}"
println "Git Commit Id          : ${buildInfo.gitCommitId}"
println "Build Tag              : ${buildInfo.tag}"
println "Build Host             : ${buildInfo.host}"
println "Build By               : ${buildInfo.by}"
println "Build Type             : ${buildInfo.type}"
println "Build Time             : ${buildInfo.time}"
//println "Server Home			: ${serverHome}"
println "---------------------------------------------------------------------------"

processResources {
    filter ReplaceTokens, tokens: buildInfo
}

appengine {
    //httpAddress = '192.168.1.4'
    httpPort = 1131
    disableUpdateCheck = true

    appcfg {
        email = 'vteial@wybis.com'
        //email = 'vteial@gmail.com'
        noCookies = true
        oauth2 = true

        logs {
            severity = 1
            outputFile = file('prodserver-log.txt')
        }

        app {
            id = 'wybis-wys'
        }
    }
}

dependencies {
    def jacksonVersion = '2.4.3'
    def groovyVersion = '2.3.11'
    def gaeVersion = '1.9.26'

    compile("eu.bitwalker:UserAgentUtils:1.14")
    compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    compile("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    compile("org.codehaus.groovy:groovy-all:$groovyVersion")

    compile("com.google.appengine:appengine-api-1.0-sdk:$gaeVersion")
    compile("com.google.appengine:appengine-api-labs:$gaeVersion")

    compile("org.gaelyk:gaelyk:2.1.2")

    testCompile("org.gaelyk:gaelyk-spock:0.4")
    testCompile("com.google.appengine:appengine-api-stubs:$gaeVersion")
    testCompile("com.google.appengine:appengine-testing:$gaeVersion")

//    functionalTestCompile("org.seleniumhq.selenium:selenium-firefox-driver:2.40.0")
//    functionalTestCompile("org.gebish:geb-spock:0.9.2")

    appengineSdk("com.google.appengine:appengine-java-sdk:$gaeVersion")
}

task bowerComponents(type: Sync) {
    from 'bower_components'

    include '**/*.min.css'
    include '**/*.min.js'
    include '**/*.map'
    include 'skeleton/css/normalize.css'
    include 'skeleton/css/skeleton.css'
    include 'sweetalert/dist/sweetalert.css'
    include 'selectize/dist/css/selectize.default.css'
    include 'angular-inputmask/src/green.inputmask4angular.js'
    include 'angular-selectize2/dist/angular-selectize.js'

    into 'src/main/webapp/bower_components'

    includeEmptyDirs = false
}

task cleanlocallogs << {
    File logDir = new File('logs')
    if (logDir.exists()) {
        logDir.eachFile { file ->
            println "Is ${file.name} deleted? " + file.delete()
        }
    }
}
